#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("used-product-app:server");
const http = require("http");
const https = require("https");
const connectDB = require("../config/db");
const configurePassport = require("../config/jwt");
const fs = require("fs");
require("dotenv").config();

/** Connect to MongoDB */
const db = connectDB();

/* deployment on Oracle Cloud */
if (process.env.NODE_ENV === "production") {
  const privateKey = fs.readFileSync("key.pem", "utf8");
  const certificate = fs.readFileSync("cert.pem", "utf8");

  const credentials = {
    key: privateKey,
    cert: certificate,
  };

  const server = https.createServer(credentials, app);

  server.listen(443, () => {
    console.log("HTTPS Server running on port 443");
  });
} else {
  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);

  /** Configure passport */
  const passport = configurePassport();

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address();
    const bind =
      typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
    console.log(`Server is running on port ${port}`);
  }
}
